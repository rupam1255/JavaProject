/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.ThirdPartyHospital;

import Business.Appointment.SlotRange;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Hospital.Department;
import Business.Hospital.Department.CareType;
import Business.Hospital.Doctor;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.TPHospitalAppintmentScheduler;
import Business.UserAccount.UserAccount;
import com.toedter.calendar.JTextFieldDateEditor;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rupam Tiwari
 */
public class ManageHospitalAppointmentSlots extends javax.swing.JPanel {

    /**
     * Creates new form ManageHospitalAppointmentSlots
     */
    JPanel sequencer;
    Network network;
    HospitalEnterprise enterprise;
    TPHospitalAppintmentScheduler organization;
    UserAccount userAccount;
    EcoSystem system;
    SimpleDateFormat sdf=new SimpleDateFormat("MM-dd-yyyy hh:mm a");
    SimpleDateFormat sdf1=new SimpleDateFormat("MM-dd-yyyy");
    SimpleDateFormat sdf2=new SimpleDateFormat("h:mm a");
    
    public ManageHospitalAppointmentSlots(JPanel sequencer, Network network, Enterprise enterprise, Organization organization, UserAccount userAccount, EcoSystem system) {
        initComponents();
        this.sequencer = sequencer;
        this.enterprise=(HospitalEnterprise)enterprise;
        this.organization=(TPHospitalAppintmentScheduler)organization;
        this.userAccount=userAccount;
        this.system=system;
        populateDepartment();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDatePickerUtil1 = new org.jdatepicker.util.JDatePickerUtil();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAppointmentSlots = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        comboDepartmentName = new javax.swing.JComboBox<Department>();
        jLabel3 = new javax.swing.JLabel();
        comboDoctorName = new javax.swing.JComboBox<Doctor>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(new Date(0));
        Date earliestDate = calendar.getTime();
        calendar.add(Calendar.MINUTE, 1439); // number of minutes in a day - 1
        Date latestDate = calendar.getTime();
        SpinnerDateModel model = new SpinnerDateModel(earliestDate,
            earliestDate,
            latestDate,
            Calendar.MINUTE);
        spinnerStartHour = new javax.swing.JSpinner();
        Calendar calendar1 = Calendar.getInstance();
        calendar1.setTime(new Date(0));
        Date earliestDate1 = calendar1.getTime();
        calendar1.add(Calendar.MINUTE, 1439); // number of minutes in a day - 1
        Date latestDate1 = calendar.getTime();
        SpinnerDateModel model1 = new SpinnerDateModel(earliestDate1,
            earliestDate1,
            latestDate1,
            Calendar.MINUTE);
        spinnerEndHour = new javax.swing.JSpinner();
        dateChooser = new com.toedter.calendar.JDateChooser();
        SpinnerDateModel model2 = new SpinnerDateModel(new Date(),
            null, null, Calendar.AM_PM);
        startAmPmSpinner = new javax.swing.JSpinner(model2);
        SpinnerDateModel model3 = new SpinnerDateModel(new Date(),
            null, null, Calendar.AM_PM);
        endAmPmSpinner = new javax.swing.JSpinner(model3);
        jLabel8 = new javax.swing.JLabel();
        offerJText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        jLabel1.setText("Manage Appointment Slots");

        tableAppointmentSlots.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Time Slot", "Doctor Name", "Department Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableAppointmentSlots);

        jLabel2.setText("Department Name*");

        comboDepartmentName.setModel(new javax.swing.DefaultComboBoxModel<>());
        comboDepartmentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDepartmentNameActionPerformed(evt);
            }
        });

        jLabel3.setText("Doctor Name*");

        comboDoctorName.setModel(new javax.swing.DefaultComboBoxModel<>());

        jLabel4.setText("Date*");

        jLabel5.setText("Time Slot*");

        jLabel6.setText("Start");

        jLabel7.setText("End");

        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        spinnerStartHour.setModel(model);
        spinnerStartHour.setEditor(new JSpinner.DateEditor(spinnerStartHour, "hh:mm"));

        spinnerEndHour.setModel(model1);
        spinnerEndHour.setEditor(new JSpinner.DateEditor(spinnerEndHour, "hh:mm"));

        dateChooser.setDateFormatString("MM-dd-yyyy");
        JTextFieldDateEditor editorText = (JTextFieldDateEditor) dateChooser.getDateEditor();
        editorText.setEditable(false);

        JSpinner.DateEditor editor = new JSpinner.DateEditor(startAmPmSpinner, "a");
        startAmPmSpinner.setEditor(editor);

        JSpinner.DateEditor editor1 = new JSpinner.DateEditor(endAmPmSpinner, "a");
        endAmPmSpinner.setEditor(editor1);

        jLabel8.setText("Offer");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Add Appointment Slot:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(82, 82, 82)
                                        .addComponent(offerJText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(18, 18, 18)
                                            .addComponent(comboDepartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addGap(82, 82, 82)
                                            .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(72, 72, 72)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(comboDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel5)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(spinnerStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(startAmPmSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(spinnerEndHour, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(endAmPmSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(390, 390, 390)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addComponent(jButton2)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel1)
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboDepartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(comboDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(dateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(spinnerStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startAmPmSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(spinnerEndHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endAmPmSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(offerJText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(155, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Department dept=(Department)comboDepartmentName.getSelectedItem();
        Doctor doc=(Doctor)comboDoctorName.getSelectedItem();
        
        if(doc==null){
            JOptionPane.showMessageDialog(null,"Please Select Doctor","Error Message",JOptionPane.ERROR_MESSAGE);
           return;
        }
        
        //System.out.println("first spinner time "+ c.get(Calendar.HOUR)+":"+ c.get(Calendar.MINUTE));
        
        
        
        
        
        //System.out.println(AM_PM=((c.get(Calendar.AM_PM))==0)?"AM":"PM");
        //System.out.println(sdf.format(dateChooser.getDate()));
        //String start=
        Date startDate=null;
        Date endDate=null;
        String AM_PM;
        
        if(dateChooser.getDate()==null){
           JOptionPane.showMessageDialog(null,"Please select a date","Error Message",JOptionPane.ERROR_MESSAGE);
           return;
       }
       
        
        String datePart=sdf1.format(dateChooser.getDate());
        if(dateChooser.getDate().before(Calendar.getInstance().getTime())){
            JOptionPane.showMessageDialog(null,"Please select a date after or equal to current date","Error Message",JOptionPane.ERROR_MESSAGE);
           return;
        }
        Date d = (Date)spinnerStartHour.getValue();
        Calendar c = Calendar.getInstance();
        c.setTime(d);
        Calendar c1 = Calendar.getInstance();
        Date d1=(Date) startAmPmSpinner.getValue();
        c1.setTime(d1);
        AM_PM=((c1.get(Calendar.AM_PM))==0)?"AM":"PM";
        
       String startDateString=datePart+" "+c.get(Calendar.HOUR)+":"+ c.get(Calendar.MINUTE)+" "+AM_PM;
       
       d=(Date)spinnerEndHour.getValue();
       c.setTime(d);
       d1=(Date) endAmPmSpinner.getValue();
       c1.setTime(d1);
       AM_PM=((c1.get(Calendar.AM_PM))==0)?"AM":"PM";
       String endDateString=datePart+" "+c.get(Calendar.HOUR)+":"+ c.get(Calendar.MINUTE)+" "+AM_PM;
       
        try {
            startDate=sdf.parse(startDateString);
            endDate=sdf.parse(endDateString);
            if(startDate.before(Calendar.getInstance().getTime())){
               JOptionPane.showMessageDialog(null,"Select a start time greater than current time");
               return;
            }
            if(endDate.before(Calendar.getInstance().getTime()) || (!endDate.after(startDate))){
                JOptionPane.showMessageDialog(null,"Select a end time greater than current time and start time");
               return;
            }
            //System.out.println(startDateString);
            //System.out.println(endDateString);
            long difference=(endDate.getTime()-startDate.getTime())/60000;
            System.out.println(difference);
            if(doc.getDept().getCareType()==CareType.Speciality){
                if(difference<20){
                JOptionPane.showMessageDialog(null,"Slot should be minimum 20 mins or greater for Speciality departments please increase time difference");
               return;
            }
            }
            if(doc.getDept().getCareType()==CareType.PrimaryCare){
                 if(difference<60){
                JOptionPane.showMessageDialog(null,"Slot should be minimum 60 mins or greater for PrimaryCare departments please increase time difference");
               return;
            }
            }
            
            String offer=offerJText.getText();
            SlotRange slot=enterprise.getSlotDirectory().createAndAddSlot(startDate, endDate, doc,offer);
            
            if(slot==null){
                JOptionPane.showMessageDialog(null,"Entered Slot overlaps with an existing slot for the same Doctor");
               return;
            }else{
                enterprise.getAppDirectory().createAndAddAppointments(slot);
                JOptionPane.showMessageDialog(null,"Added Slot Successfully!");
                populateTable();
            }
            
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null,"Something went wrong");
        }
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void comboDepartmentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDepartmentNameActionPerformed
        // TODO add your handling code here:
        Department dept=(Department)comboDepartmentName.getSelectedItem();
        populateDoctor(dept);
    }//GEN-LAST:event_comboDepartmentNameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Department> comboDepartmentName;
    private javax.swing.JComboBox<Doctor> comboDoctorName;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JSpinner endAmPmSpinner;
    private javax.swing.JButton jButton2;
    private org.jdatepicker.util.JDatePickerUtil jDatePickerUtil1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField offerJText;
    private javax.swing.JSpinner spinnerEndHour;
    private javax.swing.JSpinner spinnerStartHour;
    private javax.swing.JSpinner startAmPmSpinner;
    private javax.swing.JTable tableAppointmentSlots;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        
        DefaultTableModel model=(DefaultTableModel)tableAppointmentSlots.getModel();
        model.setRowCount(0);
        Calendar c=Calendar.getInstance();
        for(SlotRange s:enterprise.getSlotDirectory().getSlotRangeList()){
           Object[] row=new Object[4];
           row[0]=sdf1.format(s.getStartDt());
           row[1]=sdf2.format(s.getStartDt())+" To "+sdf2.format(s.getEndDt());
           row[2]=s;
           row[3]=s.getDoctor().getDept().getName();
           model.addRow(row);
           
        }
    }

    private void populateDepartment() {
      comboDepartmentName.removeAllItems();
      for(Department dept:enterprise.getDeptCatalog().getDepatmentList()){
          comboDepartmentName.addItem(dept);
      }
    }

    private void populateDoctor(Department dept) {
        comboDoctorName.removeAllItems();
        for(Doctor doc:dept.getDoctorList()){
            comboDoctorName.addItem(doc);
        }
    }
}
