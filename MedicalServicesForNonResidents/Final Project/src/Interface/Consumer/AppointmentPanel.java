/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Consumer;

import Business.Appointment.Appointment;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Hospital.Doctor;
import Business.Organization.Organization;
import Business.Organization.TPHospitalOperation;
import Business.Person.Consumer;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ConsumerVisitWorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rupam Tiwari
 */
public class AppointmentPanel extends javax.swing.JPanel {

    /**
     * Creates new form AppointmentPanel
     */
    JPanel sequencer;
    Doctor doctor;
    UserAccount userAccount;
    EcoSystem system;
    Consumer consumer;
    HospitalEnterprise enterprise;
    SimpleDateFormat sdf;

    public AppointmentPanel(JPanel sequencer,HospitalEnterprise enterprise, Doctor doctor, UserAccount userAccount, EcoSystem system) {
        initComponents();
        this.sequencer = sequencer;
        this.doctor = doctor;
        this.userAccount = userAccount;
        this.system = system;
        this.enterprise = enterprise;
        this.consumer=(Consumer)userAccount.getPerson();
        this.sdf=new SimpleDateFormat("MM-dd-yyyy h:mm a");
        display();
    }
    
    public void display()
    {
        textHospitalName.setText(enterprise.getName());
        textDoctorName.setText(doctor.getName());
        textDepartment.setText(doctor.getDept().getName());
        textQualification.setText(doctor.getQualification());
        //textPatientAge.setText(String.valueOf(((Calendar.getInstance().getTime().getTime())-(consumer.getDob().getTime()))/(60000*60*24*365)));
        textPatientAge.setText(sdf.format(consumer.getDob()));
        textPatientName.setText(consumer.getName());
        populateAppointmentSlots();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Gender = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textDoctorName = new javax.swing.JLabel();
        textDepartment = new javax.swing.JLabel();
        textQualification = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        textHospitalName = new javax.swing.JLabel();
        textPatientName = new javax.swing.JLabel();
        bookJButton = new javax.swing.JButton();
        cancelJButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        textPatientAge = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        slotTable = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Book Appointment");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("Doctors Name");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Department");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel4.setText("Qualification");

        textDoctorName.setText("doc name");

        textDepartment.setText("Dept");

        textQualification.setText("qual");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel10.setText("Patient Name");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel11.setText("Hospital Name");

        textHospitalName.setText("hosp name");

        textPatientName.setText("name");

        bookJButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        bookJButton.setText("Book Appointment");
        bookJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookJButtonActionPerformed(evt);
            }
        });

        cancelJButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        cancelJButton.setText("Cancel");
        cancelJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelJButtonActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel15.setText("Available Time Slots");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel9.setText("Patient DOB");

        textPatientAge.setText("age");

        slotTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "AppointmentId", "Start Time", "End Time", "Offers"
            }
        ));
        jScrollPane1.setViewportView(slotTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel15))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                                    .addComponent(textHospitalName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(textPatientName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(21, 21, 21)
                                .addComponent(textQualification, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(textDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(24, 24, 24)
                                .addComponent(textPatientAge, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(196, 196, 196))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(380, 380, 380)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(289, 289, 289)
                        .addComponent(bookJButton)
                        .addGap(62, 62, 62)
                        .addComponent(cancelJButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1)
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textDoctorName)
                            .addComponent(textHospitalName))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(textQualification)
                            .addComponent(textDepartment))))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(textPatientAge)
                    .addComponent(textPatientName))
                .addGap(42, 42, 42)
                .addComponent(jLabel15)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookJButton)
                    .addComponent(cancelJButton))
                .addContainerGap(91, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cancelJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelJButtonActionPerformed
        // TODO add your handling code here:
        sequencer.remove(this);
        CardLayout layout = (CardLayout) sequencer.getLayout();
        layout.previous(sequencer);


    }//GEN-LAST:event_cancelJButtonActionPerformed

    private void bookJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow=slotTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select appointment Slot from Table");
            return;
        }
        Appointment app=(Appointment)slotTable.getValueAt(selectedRow, 0);
        Consumer c=(Consumer)userAccount.getPerson();
        
        if(app != null){
        c.getAppDir().getAppointmentList().add(app);
        app.setAppAvailStatus("Scheduled");
        app.setReportStatus("Requested");
        
        //Create Work Request for reports
        ConsumerVisitWorkRequest encounterWorkRequest=new ConsumerVisitWorkRequest();
        encounterWorkRequest.setApp(app);
        encounterWorkRequest.setSender(consumer);
        encounterWorkRequest.setMessage("Please send Customer visit detail");
        encounterWorkRequest.setStatus("OPEN");
        encounterWorkRequest.setUserAccount(userAccount);
        Organization tporg=null;
        for(Organization org:app.getEnterprise().getOrganizationDirectory().getOrganizationList()){
            if(org instanceof TPHospitalOperation){
                tporg=org;
                
            }
        }
        tporg.getWorkQueue().addRequest(encounterWorkRequest);
        
        //Create WorkRequest for Bill
        
        ConsumerVisitWorkRequest billWorkRequest=new ConsumerVisitWorkRequest();
        billWorkRequest.setApp(app);
        billWorkRequest.setSender(consumer);
        billWorkRequest.setMessage("Please send bill for this appointment");
        billWorkRequest.setStatus("OPEN");
        billWorkRequest.setUserAccount(userAccount);
        
        tporg.getWorkQueue().addRequest(billWorkRequest);
        app.setAppAvailStatus("Occupied");
        JOptionPane.showMessageDialog(null, "Appointment booked successfully");
        }
        else
            JOptionPane.showMessageDialog(null, "Please select the time slot");
        
    }//GEN-LAST:event_bookJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Gender;
    private javax.swing.JButton bookJButton;
    private javax.swing.JButton cancelJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable slotTable;
    private javax.swing.JLabel textDepartment;
    private javax.swing.JLabel textDoctorName;
    private javax.swing.JLabel textHospitalName;
    private javax.swing.JLabel textPatientAge;
    private javax.swing.JLabel textPatientName;
    private javax.swing.JLabel textQualification;
    // End of variables declaration//GEN-END:variables

    private void populateAppointmentSlots() {
        DefaultTableModel model=(DefaultTableModel)slotTable.getModel();
        model.setRowCount(0);
        ArrayList<Appointment> tempList=new ArrayList();
        for(Appointment apt:enterprise.getAppDirectory().getAppointmentList()){
            if(Calendar.getInstance().getTime().before(apt.getStartDt()) && apt.getAppAvailStatus().equalsIgnoreCase("Available") && apt.getDoctor().equals(doctor)){
                tempList.add(apt);
            }
          
        }
        Collections.sort(tempList,new Comparator<Appointment>(){
            @Override
            public int compare(Appointment o1, Appointment o2){
                if(o1.getStartDt()== null || o2.getStartDt()== null){
                 return 0;
                }else{
                return o1.getStartDt().compareTo(o2.getStartDt());
                }
            } 

            
        });
        
        for(Appointment app:tempList){
            Object[] row=new Object[4];
            row[0]=app;
            row[1]=sdf.format(app.getStartDt());
            row[2]=sdf.format(app.getEndDt());
            row[3]=app.getSlotRange().getOffer();
            model.addRow(row);
        }
    }

    
}
